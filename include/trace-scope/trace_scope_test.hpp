/**
 * @file trace_scope.hpp
 * @brief Single-header C++ tracing library with per-thread ring buffers
 * 
 * DO NOT EDIT THIS FILE DIRECTLY - edit the source modules instead.
 * 
 * Generated: 2025-10-27 22:53:21 UTC
 * Source modules: 14 files
 * 
 * This file is generated from modular source files using AST-based extraction
 * and merging. The modular architecture allows for better maintainability
 * while preserving the single-header library benefits.
 * 
 * For development, see:
 * - Source: include/trace-scope/trace_scope_modular/
 * - Extraction: tools/extract_modular.py
 * - Merging: tools/ast_aware_merger.py
 */

#pragma once

#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\apiset.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\apisetcconv.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\basetsd.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\bcrypt.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\cderr.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\driverspecs.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\guiddef.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\inaddr.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\kernelspecs.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\ktmtypes.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\minwindef.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\poppack.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\pshpack1.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\pshpack2.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\pshpack4.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\pshpack8.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\rpc.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\rpcasync.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\rpcdce.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\rpcdcep.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\rpcndr.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\rpcnterr.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\rpcsal.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\sdkddkver.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\sdv_driverspecs.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\specstrings.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\specstrings_strict.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\specstrings_undef.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\stralign.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\tvout.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winapifamily.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\windef.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winerror.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winpackagefamily.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\winsmcrd.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\wnnc.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\wtypes.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\shared\wtypesbase.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_malloc.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memory.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_search.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_share.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_startup.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_terminate.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_wconio.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_wctype.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_wdirect.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_wio.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_wprocess.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_wstdio.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_wstdlib.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_wstring.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_wtime.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\crtdbg.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\ctype.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\errno.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\float.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\locale.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\malloc.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\math.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\process.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\share.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stddef.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdlib.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\string.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\sys/stat.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\sys/types.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\time.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\apiquery2.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\cguid.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\combaseapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\coml2api.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\commdlg.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\consoleapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\consoleapi2.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\consoleapi3.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\datetimeapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\dde.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\ddeml.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\debugapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\dlgs.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\dpapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\enclaveapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\errhandlingapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\fibersapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\fileapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\fileapifromapp.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\handleapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\heapapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\ime_cmodes.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\imm.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\interlockedapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\ioapiset.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\jobapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\jobapi2.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\joystickapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\libloaderapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\lzexpand.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\mciapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\mcx.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\memoryapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\minwinbase.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\mmeapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\mmiscapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\mmiscapi2.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\mmsyscom.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\mmsystem.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\msxml.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\namedpipeapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\namespaceapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\nb30.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\ncrypt.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\oaidl.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\objbase.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\objidl.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\objidlbase.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\ole2.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\oleauto.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\oleidl.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\playsoundapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\processenv.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\processthreadsapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\processtopologyapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\profileapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\propidl.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\propidlbase.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\prsht.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\psapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\realtimeapiset.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\reason.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\rpcnsi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\rpcnsip.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\securityappcontainer.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\securitybaseapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\servprov.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\shellapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\stringapiset.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\synchapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\sysinfoapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\systemtopologyapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\threadpoolapiset.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\threadpoollegacyapiset.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\timeapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\timezoneapi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\unknwn.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\unknwnbase.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\urlmon.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\utilapiset.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\verrsrc.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winbase.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\wincon.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\wincontypes.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\wincrypt.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\windows.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winefs.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\wingdi.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winioctl.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winnetwk.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winnls.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winnt.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winperf.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winreg.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winscard.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winsock.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winspool.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winsvc.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winuser.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\winver.h>
#include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\um\wow64apiset.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_bit_utils.hpp>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_chrono.hpp>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_heap_algorithms.hpp>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_iter_core.hpp>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_minmax.hpp>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_sanitizer_annotate_container.hpp>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_system_error_abi.hpp>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_threads_core.hpp>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_xlocinfo_types.hpp>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\algorithm>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ammintrin.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\atomic>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\cctype>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\cerrno>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\cfloat>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\chrono>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\climits>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\clocale>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\cmath>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\concurrencysal.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\crtdefs.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\cstdarg>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\cstddef>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\cstdint>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\cstdio>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\cstdlib>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\cstring>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ctime>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\cwchar>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\eh.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\emmintrin.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\exception>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\excpt.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\filesystem>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\immintrin.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\initializer_list>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\intrin.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\intrin0.inl.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iomanip>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iosfwd>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\istream>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\limits>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\limits.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\locale>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\map>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\mmintrin.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\mutex>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\new>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\nmmintrin.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\pmmintrin.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ratio>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\sal.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\setjmp.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\smmintrin.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\sstream>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\stdarg.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\stdexcept>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\stdint.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\string>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\thread>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\tmmintrin.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\tuple>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\type_traits>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\typeinfo>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\use_ansi.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vadefs.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_new.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_new_debug.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_startup.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_string.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_typeinfo.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vector>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\wmmintrin.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xatomic.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xcall_once.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xerrc.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xfacet>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xfilesystem_abi.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xkeycheck.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocbuf>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocmes>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocmon>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xloctime>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmmintrin.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xnode_handle.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xpolymorphic_allocator.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xthreads.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtimec.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtr1common>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xtree>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\yvals.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\yvals_core.h>
#include <C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\zmmintrin.h>


// Single namespace
namespace trace {


enum class TracingMode {
    Buffered,   ///< Default: events buffered in ring buffer, manual flush required
    Immediate,  ///< Real-time output: bypass ring buffer, print immediately
    Hybrid      ///< Hybrid: buffer events AND print immediately for real-time + history

enum class FlushMode {
    NEVER,           ///< No auto-flush on scope exit
    OUTERMOST_ONLY,  ///< Flush only when depth returns to 0 (default)
    EVERY_SCOPE      ///< Flush on every scope exit (high overhead)

enum class SharedMemoryMode {
    AUTO,      ///< Auto-detect: use shared if DLL detected (default)
    DISABLED,  ///< Never use shared memory (force thread_local)
    ENABLED    ///< Always use shared memory

enum class EventType : uint8_t { 
    Enter = 0,  ///< Function entry
    Exit = 1,   ///< Function exit
    Msg = 2     ///< Message/log event


struct Event {
    uint64_t    ts_ns;                  ///< Timestamp in nanoseconds (system clock, wall-clock time)
    const char* func;                   ///< Function name (for enter/exit; null for msg)
    const char* file;                   ///< Source file path
    int         line;                   ///< Source line number
    int         depth;                  ///< Call stack depth (for indentation)
    uint32_t    tid;                    ///< Thread ID (hashed to 32-bit for display)
    uint8_t     color_offset;           ///< Thread color offset for colorize_depth mode
    EventType   type;                   ///< Event type (Enter/Exit/Msg)
    uint64_t    dur_ns;                 ///< Duration in nanoseconds (Exit only; 0 otherwise)
    char        msg[TRC_MSG_CAP + 1]; ///< Message text (Msg events only; empty otherwise)
    uint64_t    memory_rss = 0;          ///< RSS memory usage in bytes (when track_memory enabled)


struct Config {
    FILE* out = stdout;               ///< Output file stream (default: stdout)
    bool print_timing = true;         ///< Show function durations with auto-scaled units
    bool print_timestamp = false;     ///< Show ISO timestamps [YYYY-MM-DD HH:MM:SS.mmm] (opt-in)
    bool print_thread = true;         ///< Show thread ID in hex format
    bool auto_flush_at_exit = false;  ///< Automatically flush when outermost scope exits (opt-in)
    
    // Tracing mode
    TracingMode mode = TracingMode::Buffered;  ///< Tracing output mode (default: Buffered)
    FILE* immediate_out = nullptr;    ///< Separate output stream for immediate output in Hybrid mode (nullptr = use 'out')
    float auto_flush_threshold = 0.9f; ///< Auto-flush when buffer reaches this fraction full in Hybrid mode (0.0-1.0, default 0.9 = 90%)
    
    // Async immediate mode configuration
    int immediate_flush_interval_ms = 1;  ///< Flush interval for async immediate mode (default: 1ms, 0 = flush every event)
    size_t immediate_queue_size = 128;    ///< Max queue size hint for async immediate mode (default: 128)

    // Prefix content control
    bool include_file_line = true;    ///< Include filename:line in prefix block

    // Filename rendering options
    bool include_filename = true;     ///< Show filename in prefix
    bool show_full_path = false;      ///< Show full path vs basename only
    int  filename_width = 20;         ///< Fixed width for filename column
    int  line_width     = 5;          ///< Fixed width for line number
    
    // Function name rendering options
    bool include_function_name = true;  ///< Show function name in prefix (line number pairs with this)
    int  function_width = 20;           ///< Fixed width for function name column
    
    // Indentation and marker visualization
    bool show_indent_markers = true;    ///< Show visual markers for indentation levels
    const char* indent_marker = "| ";   ///< Marker for each indentation level (e.g., "| ", "  ", "│ ")
    const char* enter_marker = "-> ";   ///< Marker for function entry (e.g., "-> ", "↘ ", "► ")
    const char* exit_marker = "<- ";    ///< Marker for function exit (e.g., "<- ", "↖ ", "◄ ")
    const char* msg_marker = "- ";      ///< Marker for message events (e.g., "- ", "• ", "* ")
    
    // ANSI color support
    bool colorize_depth = false;        ///< Colorize output based on call depth (opt-in, ANSI colors)
    
    // Double-buffering for high-frequency tracing
    bool use_double_buffering = false;  ///< Enable double-buffering (opt-in, eliminates flush race conditions)
                                        ///< Pros: Safe concurrent write/flush, zero disruption, better for high-frequency tracing
                                        ///< Cons: 2x memory per thread (~4MB default), slightly more complex
                                        ///< Use when: Generating millions of events/sec with frequent flushing
    
    // Filtering and selective tracing
    struct {
        std::vector<std::string> include_functions;  ///< Include function patterns (empty = trace all)
        std::vector<std::string> exclude_functions;  ///< Exclude function patterns (higher priority than include)
        std::vector<std::string> include_files;      ///< Include file patterns (empty = trace all)
        std::vector<std::string> exclude_files;      ///< Exclude file patterns (higher priority than include)
        int max_depth = -1;                          ///< Maximum trace depth (-1 = unlimited)
    } filter;
    
    // Performance metrics and memory tracking
    bool print_stats = false;        ///< Print performance statistics at program exit
    bool track_memory = false;       ///< Sample RSS memory at each trace point (low overhead ~1-5µs)
    
    // Flush and shared memory behavior
    FlushMode flush_mode = FlushMode::OUTERMOST_ONLY;  ///< When to auto-flush on scope exit
    SharedMemoryMode shared_memory_mode = SharedMemoryMode::AUTO;  ///< Shared memory usage mode
    
    // Binary dump configuration
    const char* dump_prefix = "trace";  ///< Filename prefix for binary dumps (default: "trace")
    const char* dump_suffix = ".trc";   ///< File extension for binary dumps (default: ".trc")
    const char* output_dir = nullptr;   ///< Output directory (nullptr = current directory)
    
    /// Output directory layout options
    enum class OutputLayout {
        Flat,      ///< All files in output_dir: output_dir/trace_*.trc
        ByDate,    ///< Organized by date: output_dir/2025-10-20/trace_*.trc
        BySession  ///< Organized by session: output_dir/session_001/trace_*.trc
    };
    OutputLayout output_layout = OutputLayout::Flat;  ///< Directory structure layout (default: Flat)
    int current_session = 0;  ///< Session number for BySession layout (0 = auto-increment)
    
    /**
     * @brief Load configuration from INI file.
     * 
     * Parses an INI file and applies settings to this Config instance.
     * Supports sections: [output], [display], [formatting], [markers], [modes], 
     *                     [filter], [performance], [dump]
     * 
     * @param path Path to INI file (relative or absolute)
     * @return true on success, false if file not found or critical error
     * 
     * Example INI format:
     * @code
     * [display]
     * print_timing = true
     * print_timestamp = false
     * 
     * [dump]
     * prefix = trace
     * suffix = .trc
     * output_dir = logs
     * layout = date
     * 
     * [markers]
     * indent_marker = | 
     * enter_marker = -> 
     * @endcode
     */
    inline bool load_from_file(const char* path);


struct Ring {
    Event       buf[TRC_NUM_BUFFERS][TRC_RING_CAP];  ///< Circular buffer(s): [0] for single mode, [0]/[1] for double mode
    uint32_t    head[TRC_NUM_BUFFERS] = {0};            ///< Next write position per buffer
    uint64_t    wraps[TRC_NUM_BUFFERS] = {0};           ///< Number of buffer wraparounds per buffer
#if TRC_DOUBLE_BUFFER
    std::atomic<int> active_buf{0};                 ///< Active buffer index for double-buffering (0 or 1)
    std::mutex  flush_mtx;                          ///< Protects buffer swap during flush (double-buffer mode only)
#endif
    int         depth = 0;                          ///< Current call stack depth
    uint32_t    tid   = 0;                          ///< Thread ID (cached)
    uint8_t     color_offset = 0;                   ///< Thread-specific color offset (0-7) for visual distinction
    bool        registered = false;                 ///< Whether this ring is registered globally
    uint64_t    start_stack[TRC_DEPTH_MAX];       ///< Start timestamp per depth (for duration calculation)
    const char* func_stack[TRC_DEPTH_MAX];        ///< Function name per depth (for message context)
    
    /**
     * @brief Constructor: Initialize thread-specific values.
     * Defined after thread_id_hash() declaration.
     */
    Ring();
    
    /**
     * @brief Destructor: Unregister from global registry.
     * 
     * When a thread exits, its thread_local Ring is destroyed. We remove it
     * from the global registry to prevent flush_all() from accessing freed memory.
     * 
     * Note: Any unflushed events in this ring will be lost. Applications should
     * call flush_all() or enable auto_flush_at_exit before threads terminate.
     */
    inline ~Ring();  // Defined after registry() declaration

    /**
     * @brief Check if ring buffer should be auto-flushed (hybrid mode).
     * 
     * Returns true if hybrid mode is enabled and buffer usage exceeds
     * the configured threshold.
     * 
     * @return true if buffer should be flushed
     */
    inline bool should_auto_flush() const {
        if (get_config().mode != TracingMode::Hybrid) {
            return false;
        
        // Check active buffer usage
        int buf_idx = 0;
#if TRC_DOUBLE_BUFFER
        if (get_config().use_double_buffering) {
            buf_idx = active_buf.load(std::memory_order_relaxed);
#endif
        float usage = (float)head[buf_idx] / (float)TRC_RING_CAP;
        if (wraps[buf_idx] > 0) {
            usage = 1.0f;  // Already wrapped = 100% full
        
        return usage >= get_config().auto_flush_threshold;

    /**
     * @brief Write a trace event (Enter/Exit/Msg).
     * 
     * In immediate mode, prints directly. In buffered mode, writes to ring buffer.
     * Maintains call stack depth and tracks start times for duration calculation.
     * 
     * @param type Event type (Enter/Exit/Msg)
     * @param func Function name (null for Msg)
     * @param file Source file path
     * @param line Source line number
     */
    inline void write(EventType type, const char* func, const char* file, int line) {
#if TRC_ENABLED
        // Apply filters - skip if filtered out, but still update depth
        if (!filter_utils::should_trace(func, file, depth)) {
            // Must still track depth to maintain correct nesting
            if (type == EventType::Enter) {
                int d = depth;
                if (d < TRC_DEPTH_MAX) {
                    const auto now = std::chrono::system_clock::now().time_since_epoch();
                    uint64_t now_ns = (uint64_t)std::chrono::duration_cast<std::chrono::nanoseconds>(now).count();
                    start_stack[d] = now_ns;
                    func_stack[d] = func;
                ++depth;
            else if (type == EventType::Exit) {
                depth = std::max(0, depth - 1);
            return;  // Filtered out - don't write event
        
        const auto now = std::chrono::system_clock::now().time_since_epoch();
        uint64_t now_ns = (uint64_t)std::chrono::duration_cast<std::chrono::nanoseconds>(now).count();

        Event e;
        e.ts_ns = now_ns;
        e.func  = func;
        e.file  = file;
        e.line  = line;
        e.tid   = tid;
        e.color_offset = color_offset;
        e.type  = type;
        e.msg[0]= '\0';
        e.dur_ns= 0;
        
        // Sample memory if tracking is enabled
        if (get_config().track_memory) {
            e.memory_rss = memory_utils::get_current_rss();
        } else {
            e.memory_rss = 0;

        if (type == EventType::Enter) {
            int d = depth;
            e.depth = d;
            if (d < TRC_DEPTH_MAX) {
                start_stack[d] = now_ns;
                func_stack[d] = func;  // Track function name for messages
            ++depth;
        } else if (type == EventType::Exit) {
            depth = std::max(0, depth - 1);
            int d = std::max(0, depth);
            e.depth = d;
            if (d < TRC_DEPTH_MAX) {
                uint64_t start_ns = start_stack[d];
                e.dur_ns = now_ns - start_ns;
        } else {
            e.depth = depth;

        // Hybrid mode: buffer AND print immediately, with auto-flush
        if (get_config().mode == TracingMode::Hybrid) {
            // Write to ring buffer first (single or double-buffer mode)
            int buf_idx = 0;
#if TRC_DOUBLE_BUFFER
            if (get_config().use_double_buffering) {
                buf_idx = active_buf.load(std::memory_order_relaxed);
#else
            if (get_config().use_double_buffering) {
                static bool warned = false;
                if (!warned) {
                    std::fprintf(stderr, "trace-scope: ERROR: use_double_buffering=true but not compiled with TRC_DOUBLE_BUFFER=1\n");
                    std::fprintf(stderr, "trace-scope: Recompile with -DTRC_DOUBLE_BUFFER=1 or add before include\n");
                    warned = true;
#endif
            buf[buf_idx][head[buf_idx]] = e;
            head[buf_idx] = (head[buf_idx] + 1) % TRC_RING_CAP;
            if (head[buf_idx] == 0) {
                ++wraps[buf_idx];
            
            // Check if we need to auto-flush BEFORE acquiring lock
            bool needs_flush = should_auto_flush();
            
            // Also print immediately for real-time visibility (using async queue)
            {
                // Ensure async queue is started (thread-safe via std::call_once)
                static std::once_flag async_init_flag;
                std::call_once(async_init_flag, []() {
                    FILE* imm_out = get_config().immediate_out;
                    if (!imm_out) {
                        imm_out = get_config().out ? get_config().out : stdout;
                    async_queue().flush_interval_ms = get_config().immediate_flush_interval_ms;
                    async_queue().batch_size = get_config().immediate_queue_size;
                    async_queue().start(imm_out);
                    
                    // Register atexit handler to stop async queue on exit
                    std::atexit([]() {
                        if (get_config().mode == TracingMode::Hybrid) {
                            async_queue().stop();  // Stops thread and flushes remaining events
                    });
                });
                
                // Enqueue event for async immediate output (non-blocking)
                async_queue().enqueue(e);
            
            // Auto-flush if buffer is near capacity (outside lock to avoid deadlock)
            if (needs_flush) {
                flush_current_thread();
        // Immediate mode: async queue with background writer (non-blocking)
        else if (get_config().mode == TracingMode::Immediate) {
            // Ensure async queue is started (thread-safe via std::call_once)
            static std::once_flag async_init_flag;
            std::call_once(async_init_flag, []() {
                FILE* out = get_config().out ? get_config().out : stdout;
                async_queue().flush_interval_ms = get_config().immediate_flush_interval_ms;
                async_queue().batch_size = get_config().immediate_queue_size;
                async_queue().start(out);
                
                // Register atexit handler to stop async queue on exit
                std::atexit([]() {
                    if (get_config().mode == TracingMode::Immediate) {
                        async_queue().stop();  // Stops thread and flushes remaining events
                });
            });
            
            // Enqueue event (non-blocking, fast)
            async_queue().enqueue(e);
        // Buffered mode: write to ring buffer only (single or double-buffer mode)
        else {
            int buf_idx = 0;
#if TRC_DOUBLE_BUFFER
            if (get_config().use_double_buffering) {
                buf_idx = active_buf.load(std::memory_order_relaxed);
#endif
            buf[buf_idx][head[buf_idx]] = e;
            head[buf_idx] = (head[buf_idx] + 1) % TRC_RING_CAP;
            if (head[buf_idx] == 0) {
                ++wraps[buf_idx];
#endif

    /**
     * @brief Write a formatted message event.
     * 
     * Retrieves current function context from the function stack and
     * formats the message using vsnprintf. In immediate mode, prints directly.
     * In buffered mode, writes to ring buffer.
     * 
     * @param file Source file path
     * @param line Source line number
     * @param fmt Printf-style format string
     * @param ap Variable argument list
     */
    inline void write_msg(const char* file, int line, const char* fmt, va_list ap) {
        // Get current function name from the stack (depth is at current scope)
        const char* current_func = nullptr;
        int d = depth > 0 ? depth - 1 : 0;
        if (d < TRC_DEPTH_MAX) {
            current_func = func_stack[d];
        
        // Hybrid mode: buffer AND print immediately
        if (get_config().mode == TracingMode::Hybrid) {
            // Create event and format message
            const auto now = std::chrono::system_clock::now().time_since_epoch();
            uint64_t now_ns = (uint64_t)std::chrono::duration_cast<std::chrono::nanoseconds>(now).count();
            
            Event e;
            e.ts_ns = now_ns;
            e.func = current_func;
            e.file = file;
            e.line = line;
            e.tid = tid;
            e.color_offset = color_offset;
            e.type = EventType::Msg;
            e.depth = depth;
            e.dur_ns = 0;
            e.memory_rss = 0;
            
            // Format the message
            if (!fmt) {
                e.msg[0] = 0;
            else {
                int n = std::vsnprintf(e.msg, TRC_MSG_CAP, fmt, ap);
                if (n < 0) {
                    e.msg[0] = 0;
                else {
                    e.msg[std::min(n, TRC_MSG_CAP)] = 0;
            
            // Write to buffer
            int buf_idx = 0;
#if TRC_DOUBLE_BUFFER
            if (get_config().use_double_buffering) {
                buf_idx = active_buf.load(std::memory_order_relaxed);
#endif
            buf[buf_idx][head[buf_idx]] = e;
            head[buf_idx] = (head[buf_idx] + 1) % TRC_RING_CAP;
            if (head[buf_idx] == 0) {
                ++wraps[buf_idx];
            
            // Also enqueue to async queue for immediate output
            async_queue().enqueue(e);
            
            // Check for auto-flush
            if (should_auto_flush()) {
                flush_current_thread();
        // Immediate mode: format and enqueue to async queue (non-blocking)
        else if (get_config().mode == TracingMode::Immediate) {
            const auto now = std::chrono::system_clock::now().time_since_epoch();
            uint64_t now_ns = (uint64_t)std::chrono::duration_cast<std::chrono::nanoseconds>(now).count();
            
            Event e;
            e.ts_ns = now_ns;
            e.func = current_func;
            e.file = file;
            e.line = line;
            e.tid = tid;
            e.color_offset = color_offset;
            e.type = EventType::Msg;
            e.depth = depth;
            e.dur_ns = 0;
            e.memory_rss = 0;
            
            if (!fmt) {
                e.msg[0] = 0;
            else {
                int n = std::vsnprintf(e.msg, TRC_MSG_CAP, fmt, ap);
                if (n < 0) {
                    e.msg[0] = 0;
                else {
                    e.msg[std::min(n, TRC_MSG_CAP)] = 0;
            
            // Enqueue to async queue (non-blocking, fast)
            async_queue().enqueue(e);
        // Buffered mode: write to ring buffer only
        else {
            write(EventType::Msg, current_func, file, line);
            int buf_idx = 0;
#if TRC_DOUBLE_BUFFER
            if (get_config().use_double_buffering) {
                buf_idx = active_buf.load(std::memory_order_relaxed);
#endif
            Event& e = buf[buf_idx][(head[buf_idx] + TRC_RING_CAP - 1) % TRC_RING_CAP];
            
            if (!fmt) {
                e.msg[0] = 0;
                return;
            
            int n = std::vsnprintf(e.msg, TRC_MSG_CAP, fmt, ap);
            if (n < 0) {
                e.msg[0] = 0;
            else {
                e.msg[std::min(n, TRC_MSG_CAP)] = 0;


struct Registry {
    std::mutex mtx;                 ///< Protects rings vector and thread_rings map
    std::vector<Ring*> rings;       ///< Pointers to all registered ring buffers
    std::map<std::thread::id, Ring*> thread_rings;  ///< Thread ID to Ring mapping for DLL sharing

    /**
     * @brief Register a new ring buffer.
     * @param r Pointer to ring buffer (must remain valid)
     */
    inline void add(Ring* r) {
        std::lock_guard<std::mutex> lock(mtx);
        rings.push_back(r);
    
    /**
     * @brief Unregister a ring buffer (called from Ring destructor).
     * @param r Pointer to ring buffer to remove
     */
    inline void remove(Ring* r) {
        std::lock_guard<std::mutex> lock(mtx);
        rings.erase(std::remove(rings.begin(), rings.end(), r), rings.end());
    
    /**
     * @brief Get or create Ring for current thread (DLL shared mode).
     * 
     * In DLL shared mode, Rings are heap-allocated and managed by the Registry
     * to ensure all DLLs access the same Ring per thread.
     * 
     * @return Pointer to Ring for current thread (never null)
     */
    inline Ring* get_or_create_thread_ring() {
        std::thread::id tid = std::this_thread::get_id();
        
        std::lock_guard<std::mutex> lock(mtx);
        
        // Check if Ring already exists for this thread
        auto it = thread_rings.find(tid);
        if (it != thread_rings.end()) {
            return it->second;
        
        // Create new Ring on heap
        Ring* ring = new Ring();
        thread_rings[tid] = ring;
        rings.push_back(ring);  // Also add to flush list
        ring->registered = true;
        
        return ring;
    
    /**
     * @brief Remove Ring for specific thread (DLL shared mode cleanup).
     * 
     * Called when a thread exits in DLL shared mode. Removes the Ring from
     * both the thread_rings map and the rings vector, then deletes it.
     * 
     * @param tid Thread ID to remove
     */
    inline void remove_thread_ring(std::thread::id tid) {
        std::lock_guard<std::mutex> lock(mtx);
        
        auto it = thread_rings.find(tid);
        if (it != thread_rings.end()) {
            Ring* ring = it->second;
            
            // Remove from both collections
            rings.erase(std::remove(rings.begin(), rings.end(), ring), rings.end());
            thread_rings.erase(it);
            
            // Delete the heap-allocated Ring
            delete ring;


struct Scope {
    const char* func;  ///< Function name
    const char* file;  ///< Source file
    int         line;  ///< Source line
    
    /**
     * @brief Construct a scope guard and write Enter event.
     * @param f Function name
     * @param fi Source file
     * @param li Source line
     */
    inline Scope(const char* f, const char* fi, int li) : func(f), file(fi), line(li) {
#if TRC_ENABLED
        thread_ring().write(EventType::Enter, func, file, line);
#endif
    /**
     * @brief Destruct the scope guard and write Exit event.
     * 
     * Writes Exit event with calculated duration. Flush behavior is
     * controlled by the flush_mode configuration setting.
     */
    inline ~Scope() {
#if TRC_ENABLED
        Ring& r = thread_ring();
        r.write(EventType::Exit, func, file, line);
        
        Config& cfg = get_config();
        if (cfg.flush_mode == FlushMode::EVERY_SCOPE) {
            flush_all();
        } else if (cfg.flush_mode == FlushMode::OUTERMOST_ONLY && r.depth == 0) {
            flush_all();
#endif


inline Config config


inline FILE* safe_fopen(const char* filename, const char* mode) {
#ifdef _MSC_VER
    FILE* file = nullptr;
    if (fopen_s(&file, filename, mode) != 0) {
        return nullptr;
    return file;
#else
    return std::fopen(filename, mode);
#endif

inline FILE* safe_tmpfile() {
#ifdef _MSC_VER
    FILE* file = nullptr;
    if (tmpfile_s(&file) != 0) {
        return nullptr;
    return file;
#else
    return std::tmpfile();
#endif

inline AsyncQueue& async_queue()

inline Config& get_config()

inline void flush_current_thread()

inline bool should_use_shared_memory() {
    Config& cfg = get_config();
    
    if (cfg.shared_memory_mode == SharedMemoryMode::DISABLED) {
        return false;
    if (cfg.shared_memory_mode == SharedMemoryMode::ENABLED) {
        return true;
    
    // AUTO mode: detect if shared memory already exists
    std::string shm_name = shared_memory::get_shared_memory_name();
    auto handle = shared_memory::create_or_open_shared_memory(
        shm_name.c_str(),
        sizeof(dll_shared_state::SharedTraceState),
        false  // try to open existing
    );
    
    bool exists = handle.valid;
    if (exists) {
        shared_memory::close_shared_memory(handle);
    return exists;

inline void print_event(const Event& e, FILE* out)

inline void set_external_state(Config* cfg, Registry* reg) {
    dll_shared_state::set_shared_config(cfg);
    dll_shared_state::set_shared_registry(reg);

inline Config& get_config() {
    return dll_shared_state::get_shared_config() ? *dll_shared_state::get_shared_config() : config;

inline bool load_config(const char* path) {
    return get_config().load_from_file(path);

inline bool filter_utils::should_trace(const char* func, const char* file, int depth) {
    const auto& f = get_config().filter;
    
    // Check depth filter
    if (f.max_depth >= 0 && depth > f.max_depth) {
        return false;
    
    // Check function filters
    if (func) {
        // If exclude list matches, filter out (exclude wins)
        if (matches_any(func, f.exclude_functions)) {
            return false;
        
        // If include list is not empty and doesn't match, filter out
        if (!f.include_functions.empty() && !matches_any(func, f.include_functions)) {
            return false;
    
    // Check file filters
    if (file) {
        // If exclude list matches, filter out (exclude wins)
        if (matches_any(file, f.exclude_files)) {
            return false;
        
        // If include list is not empty and doesn't match, filter out
        if (!f.include_files.empty() && !matches_any(file, f.include_files)) {
            return false;
    
    return true;  // Passed all filters

inline void filter_include_function(const char* pattern) {
    get_config().filter.include_functions.push_back(pattern);

inline void filter_exclude_function(const char* pattern) {
    get_config().filter.exclude_functions.push_back(pattern);

inline void filter_include_file(const char* pattern) {
    get_config().filter.include_files.push_back(pattern);

inline void filter_exclude_file(const char* pattern) {
    get_config().filter.exclude_files.push_back(pattern);

inline void filter_set_max_depth(int depth) {
    get_config().filter.max_depth = depth;

inline void filter_clear() {
    auto& f = get_config().filter;
    f.include_functions.clear();
    f.exclude_functions.clear();
    f.include_files.clear();
    f.exclude_files.clear();
    f.max_depth = -1;

inline Registry& registry() {
    if (dll_shared_state::get_shared_registry()) return *dll_shared_state::get_shared_registry();
    static Registry r;
    return r;

inline AsyncQueue& async_queue() {
    static AsyncQueue q;
    return q;

inline uint32_t thread_id_hash() {
    auto id = std::this_thread::get_id();
    std::hash<std::thread::id> h;
    uint64_t v = (uint64_t)h(id);
    // mix into a printable 32-bit value
    v ^= (v >> 33); v *= 0xff51afd7ed558ccdULL;
    v ^= (v >> 33); v *= 0xc4ceb9fe1a85ec53ULL;
    v ^= (v >> 33);
    return (uint32_t)(v & 0xffffffffu);

inline Ring& thread_ring() {
    // Check if we should use shared mode
    if (dll_shared_state::get_shared_registry() || should_use_shared_memory()) {
        // Shared memory path (existing logic)
        static thread_local Ring* cached_ring = nullptr;
        if (!cached_ring) {
            static thread_local ThreadRingGuard cleanup_guard;
            cached_ring = dll_shared_state::get_shared_registry()->get_or_create_thread_ring();
        return *cached_ring;
    
    // Thread-local path (existing logic)
    static thread_local Ring ring;
    static thread_local bool inited = false;
    if (!inited) {
        ring.tid = thread_id_hash();
        ring.color_offset = static_cast<uint8_t>(ring.tid % 8);
        registry().add(&ring);
        ring.registered = true;
        inited = true;
    return ring;

inline const char* base_name(const char* p) {
    if (!p) return "";
    const char* s1 = std::strrchr(p, '/');
    const char* s2 = std::strrchr(p, '\\');
    const char* s  = (s1 && s2) ? (s1 > s2 ? s1 : s2) : (s1 ? s1 : s2);
    return s ? (s + 1) : p;

inline void print_event(const Event& e, FILE* out) {
    // ANSI color for depth-based colorization with thread-aware offset
    if (get_config().colorize_depth) {
        // Combine depth and thread offset for visual distinction
        // Each thread gets a unique color offset, making multi-threaded traces easier to read
        int color_idx = (e.depth + e.color_offset) % 8;
        static const char* colors[] = {
            "\033[31m",  // Red
            "\033[32m",  // Green
            "\033[33m",  // Yellow
            "\033[34m",  // Blue
            "\033[35m",  // Magenta
            "\033[36m",  // Cyan
            "\033[37m",  // White
            "\033[91m"   // Bright Red
        };
        std::fprintf(out, "%s", colors[color_idx]);
    
    if (get_config().print_timestamp) {
        // Convert ns timestamp to human-readable ISO format with milliseconds
        auto duration = std::chrono::nanoseconds(e.ts_ns);
        auto tp = std::chrono::time_point<std::chrono::system_clock, std::chrono::nanoseconds>(duration);
        auto time_t_val = std::chrono::system_clock::to_time_t(
            std::chrono::time_point_cast<std::chrono::system_clock::duration>(tp));
        auto ms = std::chrono::duration_cast<std::chrono::milliseconds>(duration) % 1000;
        
        std::tm tm_buf;
        #ifdef _WIN32
        localtime_s(&tm_buf, &time_t_val);
        #else
        localtime_r(&time_t_val, &tm_buf);
        #endif
        
        std::fprintf(out, "[%04d-%02d-%02d %02d:%02d:%02d.%03d] ",
            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,
            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec, (int)ms.count());
    if (get_config().print_thread)    std::fprintf(out, "(%08x) ", e.tid);

    // Filename:line:function prefix block (fixed widths), before indent so alignment is stable
    if (get_config().include_file_line && e.file) {
        bool printed_something = false;
        
        // Print filename if enabled
        if (get_config().include_filename) {
            const char* path = get_config().show_full_path ? e.file : base_name(e.file);
            const int fw = (get_config().filename_width > 0 ? get_config().filename_width : 20);
            
            // Head-truncate: show beginning of path (precision limits max chars printed)
            std::fprintf(out, "%-*.*s", fw, fw, path);
            printed_something = true;
        
        // Print line number and function name if enabled (they're paired)
        if (get_config().include_function_name) {
            const int lw = (get_config().line_width > 0 ? get_config().line_width : 5);
            const int funcw = (get_config().function_width > 0 ? get_config().function_width : 20);
            const char* fname = e.func ? e.func : "";
            
            // Print colon separator if filename was printed
            if (printed_something) std::fprintf(out, ":");
            
            // Print line number
            std::fprintf(out, "%*d", lw, e.line);
            
            // Head-truncate function name: show beginning (precision limits max chars)
            std::fprintf(out, " %-*.*s", funcw, funcw, fname);
            printed_something = true;
        
        if (printed_something) std::fprintf(out, " ");

    // Depth indentation after prefix
    if (get_config().show_indent_markers) {
        // Show visual markers for each level
        const char* marker = get_config().indent_marker ? get_config().indent_marker : "| ";
        for (int i = 0; i < e.depth; ++i) {
            std::fputs(marker, out);
    } else {
        // Plain whitespace indentation
        for (int i = 0; i < e.depth; ++i) {
            std::fputs("  ", out);

    // Event type markers
    const char* enter_mk = get_config().enter_marker ? get_config().enter_marker : "-> ";
    const char* exit_mk = get_config().exit_marker ? get_config().exit_marker : "<- ";
    const char* msg_mk = get_config().msg_marker ? get_config().msg_marker : "- ";

    switch (e.type) {
    case EventType::Enter:
        std::fprintf(out, "%s%s", enter_mk, e.func);
        break;
    case EventType::Exit:
        if (get_config().print_timing) {
            // Auto-scale units based on duration
            if (e.dur_ns < 1000ULL) {
                std::fprintf(out, "%s%s  [%llu ns]", exit_mk, e.func, (unsigned long long)e.dur_ns);
            } else if (e.dur_ns < 1000000ULL) {
                std::fprintf(out, "%s%s  [%.2f us]", exit_mk, e.func, e.dur_ns / 1000.0);
            } else if (e.dur_ns < 1000000000ULL) {
                std::fprintf(out, "%s%s  [%.2f ms]", exit_mk, e.func, e.dur_ns / 1000000.0);
            } else {
                std::fprintf(out, "%s%s  [%.3f s]", exit_mk, e.func, e.dur_ns / 1000000000.0);
        } else {
            std::fprintf(out, "%s%s", exit_mk, e.func);
        break;
    case EventType::Msg:
        std::fprintf(out, "%s%s", msg_mk, e.msg[0] ? e.msg : "");
        break;
    
    // Reset color and add newline
    if (get_config().colorize_depth) {
        std::fprintf(out, "\033[0m");  // Reset to default color
    std::fprintf(out, "\n");

inline void flush_ring(Ring& r) {
    static std::mutex io_mtx;
    FILE* out = get_config().out ? get_config().out : stdout;

    int flush_buf_idx = 0;
    uint32_t count = 0;
    uint32_t start = 0;
    
    // Double-buffering mode: swap buffers atomically
#if TRC_DOUBLE_BUFFER
    if (get_config().use_double_buffering) {
        std::lock_guard<std::mutex> flush_lock(r.flush_mtx);
        
        // Atomically swap active buffer
        int old_buf = r.active_buf.load(std::memory_order_relaxed);
        int new_buf = 1 - old_buf;
        r.active_buf.store(new_buf, std::memory_order_release);
        
        // Now flush the old buffer (no one is writing to it)
        flush_buf_idx = old_buf;
        count = (r.wraps[flush_buf_idx] == 0) ? r.head[flush_buf_idx] : TRC_RING_CAP;
        start = (r.wraps[flush_buf_idx] == 0) ? 0 : r.head[flush_buf_idx];
        
        // Print events from the flushed buffer
        {
            std::lock_guard<std::mutex> io_lock(io_mtx);
            for (uint32_t i = 0; i < count; ++i) {
                uint32_t idx = (start + i) % TRC_RING_CAP;
                const Event& e = r.buf[flush_buf_idx][idx];
                print_event(e, out);
            std::fflush(out);
        
        // Clear the flushed buffer for reuse
        r.head[flush_buf_idx] = 0;
        r.wraps[flush_buf_idx] = 0;
    else
#endif
    // Single-buffer mode: flush in-place (original behavior)
    {
        std::lock_guard<std::mutex> io_lock(io_mtx);
        
        flush_buf_idx = 0;
        count = (r.wraps[flush_buf_idx] == 0) ? r.head[flush_buf_idx] : TRC_RING_CAP;
        start = (r.wraps[flush_buf_idx] == 0) ? 0 : r.head[flush_buf_idx];
        
        for (uint32_t i = 0; i < count; ++i) {
            uint32_t idx = (start + i) % TRC_RING_CAP;
            const Event& e = r.buf[flush_buf_idx][idx];
            print_event(e, out);
        std::fflush(out);

inline void flush_all() {
    std::vector<Ring*> snapshot;
    { 
        std::lock_guard<std::mutex> lock(registry().mtx); 
        snapshot = registry().rings; 
    for (Ring* r : snapshot) {
        if (r && r->registered) {
            flush_ring(*r);

inline void flush_current_thread() {
    flush_ring(thread_ring());

inline void flush_immediate_queue() {
    async_queue().flush_now();

inline void start_async_immediate(FILE* out = nullptr) {
    if (!out) out = get_config().out ? get_config().out : stdout;
    async_queue().flush_interval_ms = get_config().immediate_flush_interval_ms;
    async_queue().batch_size = get_config().immediate_queue_size;
    async_queue().start(out);

inline void stop_async_immediate() {
    async_queue().stop();

inline void check_auto_flush_on_scope_exit(int final_depth) {
    if (get_config().auto_flush_at_exit && final_depth == 0) {
        flush_all();

inline std::string generate_dump_filename(const char* prefix = nullptr) {
    namespace fs = std::filesystem;
    
    if (!prefix) prefix = get_config().dump_prefix;
    const char* suffix = get_config().dump_suffix;
    
    auto now = std::chrono::system_clock::now();
    auto time_t_val = std::chrono::system_clock::to_time_t(now);
    auto ms = std::chrono::duration_cast<std::chrono::milliseconds>(
        now.time_since_epoch()) % 1000;
    
    std::tm tm;
#ifdef _WIN32
    localtime_s(&tm, &time_t_val);
#else
    localtime_r(&time_t_val, &tm);
#endif
    
    // Build base path
    fs::path base_path;
    if (get_config().output_dir) {
        base_path = get_config().output_dir;
    } else {
        base_path = ".";
    
    // Add subdirectory based on layout
    fs::path dir_path;
    switch (get_config().output_layout) {
        case Config::OutputLayout::ByDate: {
            // Subdirectory: YYYY-MM-DD
            char date_buf[32];
            std::snprintf(date_buf, sizeof(date_buf), "%04d-%02d-%02d",
                          tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);
            dir_path = base_path / date_buf;
            break;
        case Config::OutputLayout::BySession: {
            // Subdirectory: session_NNN
            int session = get_config().current_session;
            
            // Auto-increment: find max existing session number
            if (session == 0) {
                int max_session = 0;
                try {
                    if (fs::exists(base_path)) {
                        for (const auto& entry : fs::directory_iterator(base_path)) {
                            if (entry.is_directory()) {
                                std::string dirname = entry.path().filename().string();
                                if (dirname.substr(0, 8) == "session_") {
                                    int num = std::atoi(dirname.substr(8).c_str());
                                    max_session = std::max(max_session, num);
                } catch (...) {
                    // Ignore errors during auto-detection
                session = max_session + 1;
            
            char session_buf[32];
            std::snprintf(session_buf, sizeof(session_buf), "session_%03d", session);
            dir_path = base_path / session_buf;
            break;
        case Config::OutputLayout::Flat:
        default:
            // No subdirectory
            dir_path = base_path;
            break;
    
    // Create directory if it doesn't exist
    try {
        if (!dir_path.empty() && !fs::exists(dir_path)) {
            fs::create_directories(dir_path);
    } catch (const std::exception& e) {
        std::fprintf(stderr, "trace-scope: Failed to create directory %s: %s\n",
                     dir_path.string().c_str(), e.what());
        // Fall back to current directory
        dir_path = ".";
    
    // Generate filename
    char filename_buf[256];
    std::snprintf(filename_buf, sizeof(filename_buf), "%s_%04d%02d%02d_%02d%02d%02d_%03d%s",
                  prefix,
                  tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
                  tm.tm_hour, tm.tm_min, tm.tm_sec,
                  (int)ms.count(),
                  suffix);
    
    fs::path full_path = dir_path / filename_buf;
    return full_path.string();

inline std::string dump_binary(const char* prefix = nullptr) {
    std::string filename = generate_dump_filename(prefix);
    FILE* f = safe_fopen(filename.c_str(), "wb");
    if (!f) return "";

    auto w8  = [&](uint8_t v){ std::fwrite(&v,1,1,f); };
    auto w16 = [&](uint16_t v){ std::fwrite(&v,1,2,f); };
    auto w32 = [&](uint32_t v){ std::fwrite(&v,1,4,f); };
    auto w64 = [&](uint64_t v){ std::fwrite(&v,1,8,f); };
    auto ws  = [&](const char* s, uint16_t n){ if (n) std::fwrite(s,1,n,f); };

    std::fwrite("TRCLOG10",1,8,f);
    w32(2); // version (bumped to 2 for color_offset field)
    w32(0);

    std::vector<Ring*> snapshot;
    { std::lock_guard<std::mutex> lock(registry().mtx); snapshot = registry().rings; }

    for (Ring* r : snapshot) {
        if (!r || !r->registered) continue;
        
        // Determine which buffer(s) to dump
        int num_buffers = TRC_NUM_BUFFERS;
#if TRC_DOUBLE_BUFFER
        if (!get_config().use_double_buffering) {
            num_buffers = 1;  // Only dump first buffer if not using double-buffering
#endif
        
        for (int buf_idx = 0; buf_idx < num_buffers; ++buf_idx) {
            uint32_t count = (r->wraps[buf_idx] == 0) ? r->head[buf_idx] : TRC_RING_CAP;
            uint32_t start = (r->wraps[buf_idx] == 0) ? 0 : r->head[buf_idx];

            for (uint32_t i = 0; i < count; ++i) {
                uint32_t idx = (start + i) % TRC_RING_CAP;
                const Event& e = r->buf[buf_idx][idx];

                w8((uint8_t)e.type);
                w32(e.tid);
                w8(e.color_offset);  // Added in version 2 for thread-aware colors
                w64(e.ts_ns);
                w32((uint32_t)e.depth);
                w64(e.dur_ns);
                w64(e.memory_rss);  // Added in version 2 for memory tracking

                // file, func, msg as length-prefixed
                auto emit_str = [&](const char* s){
                    if (!s) { w16(0); return; }
                    uint16_t n = (uint16_t)std::min<size_t>(65535, std::strlen(s));
                    w16(n); ws(s, n);
                };
                emit_str(e.file);
                emit_str(e.func);
                emit_str(e.msg);
                w32((uint32_t)e.line);
    std::fclose(f);
    return filename;

inline void trace_msgf(const char* file, int line, const char* fmt, ...) {
#if TRC_ENABLED
    Ring& r = thread_ring();
    va_list ap;
    va_start(ap, fmt);
    r.write_msg(file, line, fmt, ap);
    va_end(ap);
#endif

inline void trace_arg(const char* file, int line, const char* name, const char* type_name) {
#if TRC_ENABLED
    std::ostringstream oss;
    oss << name << ": " << type_name;
    trace_msgf(file, line, "%s", oss.str().c_str());
#endif


namespace stats {

/**
 * @brief Format duration in human-readable units.
 * 
 * @param ns Duration in nanoseconds
 * @return Formatted string (e.g., "1.23 ms", "456 µs", "2.5 s")
 */
inline std::string format_duration_str(uint64_t ns) {
    char buf[64];
    if (ns < 1000) {
        std::snprintf(buf, sizeof(buf), "%lu ns", (unsigned long)ns);
    } else if (ns < 1000000) {
        std::snprintf(buf, sizeof(buf), "%.2f µs", ns / 1000.0);
    } else if (ns < 1000000000) {
        std::snprintf(buf, sizeof(buf), "%.2f ms", ns / 1000000.0);
    } else {
        std::snprintf(buf, sizeof(buf), "%.3f s", ns / 1000000000.0);
    return buf;

/**
 * @brief Format memory size in human-readable units.
 * 
 * @param bytes Memory size in bytes
 * @return Formatted string (e.g., "1.23 MB", "456 KB", "2.5 GB")
 */
inline std::string format_memory_str(uint64_t bytes) {
    char buf[64];
    if (bytes < 1024) {
        std::snprintf(buf, sizeof(buf), "%lu B", (unsigned long)bytes);
    } else if (bytes < 1024 * 1024) {
        std::snprintf(buf, sizeof(buf), "%.2f KB", bytes / 1024.0);
    } else if (bytes < 1024 * 1024 * 1024) {
        std::snprintf(buf, sizeof(buf), "%.2f MB", bytes / (1024.0 * 1024.0));
    } else {
        std::snprintf(buf, sizeof(buf), "%.2f GB", bytes / (1024.0 * 1024.0 * 1024.0));
    return buf;

/**
 * @brief Compute performance statistics from all ring buffers.
 * 
 * Scans all registered ring buffers and computes per-function and per-thread
 * statistics including call counts, execution times, and memory usage.
 * 
 * @return Vector of per-thread statistics
 */
inline std::vector<ThreadStats> compute_stats() {
    std::vector<ThreadStats> result;
    std::lock_guard<std::mutex> lock(registry().mtx);
    
    // Map: tid → (func_name → stats)
    std::map<uint32_t, std::map<const char*, FunctionStats>> per_thread;
    std::map<uint32_t, uint64_t> thread_peak_rss;
    
    for (Ring* r : registry().rings) {
        if (!r || !r->registered) continue;
        
        uint32_t tid = r->tid;
        uint64_t thread_peak = 0;
        
        // Process all buffers for this ring
        int num_buffers = TRC_NUM_BUFFERS;
#if TRC_DOUBLE_BUFFER
        if (!get_config().use_double_buffering) {
            num_buffers = 1;  // Only process first buffer if not using double-buffering
#endif
        
        for (int buf_idx = 0; buf_idx < num_buffers; ++buf_idx) {
            uint32_t count = (r->wraps[buf_idx] == 0) ? r->head[buf_idx] : TRC_RING_CAP;
            uint32_t start = (r->wraps[buf_idx] == 0) ? 0 : r->head[buf_idx];
            
            for (uint32_t i = 0; i < count; ++i) {
                uint32_t idx = (start + i) % TRC_RING_CAP;
                const Event& e = r->buf[buf_idx][idx];
                
                // Track peak RSS for this thread
                if (e.memory_rss > 0) {
                    thread_peak = std::max(thread_peak, e.memory_rss);
                
                // Only track Exit events (they have duration)
                if (e.type != EventType::Exit || !e.func) continue;
                
                auto& stats = per_thread[tid][e.func];
                if (stats.call_count == 0) {
                    stats.func_name = e.func;
                    stats.min_ns = UINT64_MAX;
                    stats.max_ns = 0;
                    stats.memory_delta = 0;
                
                stats.call_count++;
                stats.total_ns += e.dur_ns;
                stats.min_ns = std::min(stats.min_ns, e.dur_ns);
                stats.max_ns = std::max(stats.max_ns, e.dur_ns);
                
                // Track memory delta (simplified: use RSS at exit)
                if (e.memory_rss > 0) {
                    stats.memory_delta = std::max(stats.memory_delta, e.memory_rss);
        
        thread_peak_rss[tid] = thread_peak;
    
    // Convert to vector
    for (auto& [tid, funcs] : per_thread) {
        ThreadStats ts;
        ts.tid = tid;
        ts.total_events = 0;
        ts.peak_rss = thread_peak_rss[tid];
        
        for (auto& [fname, fstats] : funcs) {
            ts.functions.push_back(fstats);
            ts.total_events += fstats.call_count;
        result.push_back(ts);
    
    return result;

/**
 * @brief Print performance statistics to output stream.
 * 
 * Displays global and per-thread statistics in a formatted table.
 * Shows function call counts, execution times, and memory usage.
 * 
 * @param out Output stream (default: stderr)
 */
inline void print_stats(FILE* out = stderr) {
    auto stats = compute_stats();
    if (stats.empty()) return;
    
    std::fprintf(out, "\n");
    std::fprintf(out, "================================================================================\n");
    std::fprintf(out, " Performance Metrics Summary\n");
    std::fprintf(out, "================================================================================\n");
    
    // Global aggregation
    std::map<const char*, FunctionStats> global;
    uint64_t global_peak_rss = 0;
    
    for (const auto& ts : stats) {
        global_peak_rss = std::max(global_peak_rss, ts.peak_rss);
        
        for (const auto& fs : ts.functions) {
            auto& g = global[fs.func_name];
            if (g.call_count == 0) {
                g.func_name = fs.func_name;
                g.min_ns = UINT64_MAX;
                g.max_ns = 0;
                g.memory_delta = 0;
            g.call_count += fs.call_count;
            g.total_ns += fs.total_ns;
            g.min_ns = std::min(g.min_ns, fs.min_ns);
            g.max_ns = std::max(g.max_ns, fs.max_ns);
            g.memory_delta = std::max(g.memory_delta, fs.memory_delta);
    
    // Sort by total time descending
    std::vector<FunctionStats> sorted;
    for (auto& [name, fs] : global) sorted.push_back(fs);
    std::sort(sorted.begin(), sorted.end(), [](const auto& a, const auto& b) {
        return a.total_ns > b.total_ns;
    });
    
    // Print global stats
    std::fprintf(out, "\nGlobal Statistics:\n");
    std::fprintf(out, "--------------------------------------------------------------------------------\n");
    std::fprintf(out, "%-40s %10s %12s %12s %12s %12s %12s\n",
                 "Function", "Calls", "Total", "Avg", "Min", "Max", "Memory");
    std::fprintf(out, "--------------------------------------------------------------------------------\n");
    
    for (const auto& fs : sorted) {
        std::fprintf(out, "%-40s %10lu %12s %12s %12s %12s %12s\n",
                     fs.func_name,
                     (unsigned long)fs.call_count,
                     format_duration_str(fs.total_ns).c_str(),
                     format_duration_str((uint64_t)fs.avg_ns()).c_str(),
                     format_duration_str(fs.min_ns).c_str(),
                     format_duration_str(fs.max_ns).c_str(),
                     format_memory_str(fs.memory_delta).c_str());
    
    // Print system memory summary
    if (global_peak_rss > 0) {
        std::fprintf(out, "\nSystem Memory Summary:\n");
        std::fprintf(out, "--------------------------------------------------------------------------------\n");
        std::fprintf(out, "Peak RSS: %s\n", format_memory_str(global_peak_rss).c_str());
        std::fprintf(out, "Current RSS: %s\n", format_memory_str(memory_utils::get_current_rss()).c_str());
    
    // Per-thread breakdown (if multiple threads)
    if (stats.size() > 1) {
        std::fprintf(out, "\nPer-Thread Breakdown:\n");
        std::fprintf(out, "================================================================================\n");
        
        for (const auto& ts : stats) {
            std::fprintf(out, "\nThread 0x%08x (%lu events, peak RSS: %s):\n", 
                         ts.tid, (unsigned long)ts.total_events, 
                         format_memory_str(ts.peak_rss).c_str());
            std::fprintf(out, "--------------------------------------------------------------------------------\n");
            std::fprintf(out, "%-40s %10s %12s %12s %12s\n", "Function", "Calls", "Total", "Avg", "Memory");
            std::fprintf(out, "--------------------------------------------------------------------------------\n");
            
            // Sort by total time
            auto thread_sorted = ts.functions;
            std::sort(thread_sorted.begin(), thread_sorted.end(), [](const auto& a, const auto& b) {
                return a.total_ns > b.total_ns;
            });
            
            for (const auto& fs : thread_sorted) {
                std::fprintf(out, "%-40s %10lu %12s %12s %12s\n",
                             fs.func_name,
                             (unsigned long)fs.call_count,
                             format_duration_str(fs.total_ns).c_str(),
                             format_duration_str((uint64_t)fs.avg_ns()).c_str(),
                             format_memory_str(fs.memory_delta).c_str());
    
    std::fprintf(out, "================================================================================\n\n");


namespace shared_memory {
    // Platform-specific shared memory handle
    struct SharedMemoryHandle {
#ifdef _WIN32
        void* handle;
        void* mapped_view;
#else
        int fd;
        void* mapped_addr;
#endif
        bool valid;
    };
    
    // Create or open shared memory region
    inline SharedMemoryHandle create_or_open_shared_memory(const char* name, size_t size, bool create) {
        SharedMemoryHandle handle = {0};
        
#ifdef _WIN32
        handle.handle = nullptr;
        handle.mapped_view = nullptr;
        handle.valid = false;
        
        if (create) {
            handle.handle = CreateFileMappingA(
                INVALID_HANDLE_VALUE,
                nullptr,
                PAGE_READWRITE,
                0,
                static_cast<DWORD>(size),
                name
            );
        } else {
            handle.handle = OpenFileMappingA(FILE_MAP_ALL_ACCESS, FALSE, name);
        
        if (handle.handle) {
            handle.mapped_view = MapViewOfFile(handle.handle, FILE_MAP_ALL_ACCESS, 0, 0, size);
            handle.valid = (handle.mapped_view != nullptr);
#else
        handle.fd = -1;
        handle.mapped_addr = nullptr;
        handle.valid = false;
        
#ifdef __linux__ || defined(__APPLE__)
        int flags = O_RDWR;
        if (create) flags |= O_CREAT | O_EXCL;
        
        handle.fd = shm_open(name, flags, 0666);
        
        if (handle.fd >= 0) {
            if (create) {
                ftruncate(handle.fd, size);
            handle.mapped_addr = mmap(nullptr, size, PROT_READ | PROT_WRITE, MAP_SHARED, handle.fd, 0);
            handle.valid = (handle.mapped_addr != MAP_FAILED);
#else
        // POSIX shared memory not available on this platform
        handle.valid = false;
#endif
#endif
        
        return handle;
    
    // Get the mapped address from a handle (platform-agnostic)
    inline void* get_mapped_address(const SharedMemoryHandle& handle) {
#ifdef _WIN32
        return handle.mapped_view;
#else
        return handle.mapped_addr;
#endif
    
    // Close shared memory
    inline void close_shared_memory(SharedMemoryHandle& handle) {
        if (!handle.valid) return;
        
#ifdef _WIN32
        if (handle.mapped_view) {
            UnmapViewOfFile(handle.mapped_view);
            handle.mapped_view = nullptr;
        if (handle.handle) {
            CloseHandle(handle.handle);
            handle.handle = nullptr;
#else
#ifdef __linux__ || defined(__APPLE__)
        if (handle.mapped_addr && handle.mapped_addr != MAP_FAILED) {
            munmap(handle.mapped_addr, sizeof(SharedTraceState));
            handle.mapped_addr = nullptr;
        if (handle.fd >= 0) {
            close(handle.fd);
            handle.fd = -1;
#endif
#endif
        handle.valid = false;
    
    // Get unique shared memory name for this process
    inline std::string get_shared_memory_name() {
#ifdef _WIN32
        DWORD pid = GetCurrentProcessId();
        char name[128];
        std::snprintf(name, sizeof(name), "Local\\trace_scope_%lu", pid);
        return name;
#elif defined(__linux__) || defined(__APPLE__)
        pid_t pid = getpid();
        char name[128];
        std::snprintf(name, sizeof(name), "/trace_scope_%d", pid);
        return name;
#else
        // Fallback for unsupported platforms
        return "/trace_scope_fallback";
#endif

namespace dll_shared_state {
    // Shared state structure
    struct SharedTraceState {
        uint32_t magic;
        uint32_t version;
        Config* config_ptr;
        Registry* registry_ptr;
        char process_name[64];
    };
    
    // Get or create shared state (thread-safe)
    inline SharedTraceState* get_shared_state() {
        static std::mutex init_mutex;
        static SharedTraceState* state = nullptr;
        static shared_memory::SharedMemoryHandle shm_handle;
        
        if (state) return state;
        
        std::lock_guard<std::mutex> lock(init_mutex);
        if (state) return state;  // Double-check
        
        // Try to open existing shared memory first (DLL case)
        std::string shm_name = shared_memory::get_shared_memory_name();
        shm_handle = shared_memory::create_or_open_shared_memory(
            shm_name.c_str(),
            sizeof(SharedTraceState),
            false  // Try open first
        );
        
        if (!shm_handle.valid) {
            // Doesn't exist, we might be the first/main EXE
            // This is OK - will be created by TRC_SETUP_DLL_SHARED()
            return nullptr;
        
        // Access shared memory
        state = static_cast<SharedTraceState*>(shared_memory::get_mapped_address(shm_handle));
        
        // Validate magic number
        if (state->magic != 0x54524143) {  // "TRAC"
            state = nullptr;  // Invalid shared memory
        
        return state;
    
    inline Config* get_shared_config() {
        SharedTraceState* state = get_shared_state();
        return state ? state->config_ptr : nullptr;
    
    inline Registry* get_shared_registry() {
        SharedTraceState* state = get_shared_state();
        return state ? state->registry_ptr : nullptr;
    
    inline void set_shared_config(Config* cfg) {
        SharedTraceState* state = get_shared_state();
        if (state) state->config_ptr = cfg;
    
    inline void set_shared_registry(Registry* reg) {
        SharedTraceState* state = get_shared_state();
        if (state) state->registry_ptr = reg;

namespace internal {

// Flag to ensure we only register once
static bool stats_registered = false;

// Exit handler function
inline void stats_exit_handler() {
    if (get_config().print_stats) {
        stats::print_stats(get_config().out ? get_config().out : stderr);

// Register exit handler if stats are enabled
inline void ensure_stats_registered() {
    if (!stats_registered && get_config().print_stats) {
        std::atexit(stats_exit_handler);
        stats_registered = true;

} // namespace trace

